---
# For full documentation of the configuration options please
# see: https://github.com/golangci/golangci-lint#config-file.

# options for analysis running
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 5m

  # list of build tags, all linters use it. Default is empty list.
  build-tags:
    - debug

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #   	vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs:
    - mocks$
    - proto$

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files:
    - apis/network/v1alpha1/securitygroup_types.go
    - apis/network/v1alpha1/securitygroup_types.go
    - apis/network/v1alpha1/subnet_types.go
    - apis/network/v1alpha1/subnet_types.go

# linters that we should / shouldn't run
linters:
  disable-all: true  # we whitelist so we don't get surprised on upgrade.
  enable:
    - deadcode
    - depguard
    - dupl
    - errcheck
    - gocritic
    - gocyclo
    - gofmt
    - golint
    - gosimple
    - govet
    - misspell
    - nakedret
    - scopelint
    - staticcheck
    - structcheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - varcheck

# all available settings of specific linters, we can set an option for
# a given linter even if we deactivate that same linter at runtime
linters-settings:
  depguard:
    list-type: blacklist
    include-go-root: true
    packages:
      - github.com/stretchr/testify/suite
      - golang.org/x/net/context
      - log
    packages-with-error-message:
      - github.com/stretchr/testify/suite: Do not use third-party test suite frameworks. Use native sub-tests instead. See https://documentation.production-intinf-eu1.i8e.io/master/docsy/en/product-groups/dev-workflow/golang/blacklisted-imports.,
      - golang.org/x/net/context: The "context" package is a drop-in replacement.
      - log: Do not use the standard log package, instead prefer the zap logging package
  govet:
    # report about shadowed variables
    check-shadowing: true

  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 40

  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 150

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 6
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 5

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 0  # Warn on all naked returns.

  gocritic:
    # which checks should be enabled; can't be combined with 'disabled-checks';
    # default are: [appendAssign assignOp caseOrder dupArg dupBranchBody dupCase flagDeref
    # ifElseChain regexpMust singleCaseSwitch sloppyLen switchTrue typeSwitchVar underef
    # unlambda unslice rangeValCopy defaultCaseOrder];
    #
    # List of available checks:
    # https://github.com/go-critic/go-critic/blob/master/docs/overview.md
    enabled-checks:
      # "diagnostic" checkers
      - caseOrder
      - dupArg
      - dupBranchBody
      - dupCase
      - dupSubExpr
      # "style" checkers
      - assignOp
      - captLocal
      - defaultCaseOrder
      - dupImport
      - elseIf
      - emptyFallthrough
      - ifElseChain
      - importShadow
      - regexpMust
      - singleCaseSwitch
      - sloppyLen
      - stringXbytes
      - switchTrue
      - typeAssertChain
      - typeSwitchVar
      - typeUnparen
      - underef
      - unlabelStmt
      - unlambda
      - unnecessaryBlock
      - unslice
      # "performance" checkers
      - appendCombine
      - indexAlloc

# rules to deal with reported issues
issues:
  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues created after git revision `REV`
  new-from-rev: ''  # Show all linter errors.

  # There are also some default exclude patterns which we disable, although we re-enable some of
  # them explicitly below. To list all default patterns you can run `golangci-lint run --help`.
  exclude-use-default: false

  # List of regexps of issue texts to exclude.
  exclude:
    # gosec: Too many false-positives for parametrized shell calls
    - Subprocess launch(ed with variable|ing should be audited)

    # gosec: Duplicated errcheck checks
    - G104

    # gosec: Too many issues in popular repos
    - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)

    # gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
    - Potential file inclusion via variable

  # List of path and linter specific issues that should be excluded.
  exclude-rules:
    # Disables specific instances of "Error return value of XYZ is not checked".
    # Almost all programs ignore errors on these functions and in most cases it's ok.
    - path: .*\.go$
      text: Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked
      linters:
        - errcheck
